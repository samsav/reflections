What happens when you initialize a repository? Why do you need to do it?

  When a repository is initialized, a hidden directory called `.git` is
  created. The directory contains the necessary components and metadata to
  track changes in the repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area provides an intermediary step to the commit process. The
  benefit of having such a middle phase is that when making changes to files
  or how the working directory is organized, you don't have to worry about
  only making changes that you want to commit right away or in a single
  commit. You can make various changes and later organize them into logical
  commits in the staging area.


How can you use the staging area to make sure you have one commit per logical
change?

  All the files that have been changed do not need to be committed at the
  time. Instead, they can be put into the staging area in whatever
  combinations that make sense to bundle into a single commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Branches are useful when there's a need to have multiple versions of the
  same code available, whether it's for trying out experimental new features
  without compromising the existing working code or adding new language
  localizations. Branches offer an easy way of keeping these versions separate
  and for switching between them.
